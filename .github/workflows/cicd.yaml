name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: acrdigitalgarage02.azurecr.io
  IMAGE_ORG: dg0410

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [member, mysub, recommend]
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read deployment environment variables
      run: |
        while IFS='=' read -r key value || [ -n "$key" ]; do
          if [[ -n "$key" && ! "$key" =~ ^[[:space:]]*# ]]; then
            value=$(echo "$value" | sed 's/#.*$//' | xargs)
            echo "$key=$value" >> $GITHUB_ENV
            echo "Set $key=$value"
          fi
        done < deployment/deploy_env_vars

    - name: Generate image tag
      id: generate-tag
      run: |
        IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Generated image tag: $IMAGE_TAG"

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build application
      run: |
        if [ "${{ matrix.service }}" = "mysub" ]; then
          ./gradlew :mysub-infra:clean :mysub-infra:build -x test
        else
          ./gradlew :${{ matrix.service }}:clean :${{ matrix.service }}:build -x test
        fi

    - name: Run tests and generate coverage
      run: |
        if [ "${{ matrix.service }}" = "mysub" ]; then
          ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport
        else
          ./gradlew :${{ matrix.service }}:test :${{ matrix.service }}:jacocoTestReport
        fi

    - name: SonarQube analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        if [ -z "$SONAR_HOST_URL" ] || [ -z "$SONAR_TOKEN" ]; then
          echo "SonarQube credentials not found. Skipping SonarQube analysis."
          exit 0
        fi
        
        echo "Testing SonarQube server connection..."
        if ! curl -f -s -H "Authorization: Bearer $SONAR_TOKEN" "$SONAR_HOST_URL/api/system/status" > /dev/null; then
          echo "Warning: Cannot connect to SonarQube server. Skipping analysis."
          exit 0
        fi
        
        if [ "${{ matrix.service }}" = "mysub" ]; then
          ./gradlew :mysub-infra:sonar \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.login="$SONAR_TOKEN" \
            -Dsonar.projectKey=lifesub-${{ matrix.service }}-dg0410 \
            -Dsonar.projectName=lifesub-${{ matrix.service }}-dg0410 \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
        else
          ./gradlew :${{ matrix.service }}:sonar \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.login="$SONAR_TOKEN" \
            -Dsonar.projectKey=lifesub-${{ matrix.service }}-dg0410 \
            -Dsonar.projectName=lifesub-${{ matrix.service }}-dg0410 \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.registry }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        IMAGE_TAG=${{ steps.generate-tag.outputs.image-tag }}
        
        # Determine build directory and jar file
        if [ "${{ matrix.service }}" = "mysub" ]; then
          BUILD_DIR="mysub-infra/build/libs"
          JAR_FILE="mysub.jar"
        else
          BUILD_DIR="${{ matrix.service }}/build/libs"
          JAR_FILE="${{ matrix.service }}.jar"
        fi
        
        # Check if JAR file exists
        if [ ! -f "$BUILD_DIR/$JAR_FILE" ]; then
          echo "Error: JAR file not found at $BUILD_DIR/$JAR_FILE"
          echo "Listing contents of build directory:"
          ls -la $BUILD_DIR/ || echo "Build directory does not exist"
          exit 1
        fi
        
        # Build and push image
        docker build \
          --build-arg BUILD_LIB_DIR="$BUILD_DIR" \
          --build-arg ARTIFACTORY_FILE="$JAR_FILE" \
          -f deployment/container/Dockerfile \
          -t ${{ env.registry }}/${{ env.image_org }}/${{ matrix.service }}:$IMAGE_TAG .
        
        docker push ${{ env.registry }}/${{ env.image_org }}/${{ matrix.service }}:$IMAGE_TAG

  deploy:
    needs: build-and-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read deployment environment variables
      run: |
        while IFS='=' read -r key value || [ -n "$key" ]; do
          if [[ -n "$key" && ! "$key" =~ ^[[:space:]]*# ]]; then
            value=$(echo "$value" | sed 's/#.*$//' | xargs)
            echo "$key=$value" >> $GITHUB_ENV
            echo "Set $key=$value"
          fi
        done < deployment/deploy_env_vars

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group rg-digitalgarage-02 --name aks-digitalgarage-02 --overwrite-existing

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Generate Kubernetes manifests
      run: |
        IMAGE_TAG=${{ needs.build-and-release.outputs.image-tag }}
        
        # Set environment variables for template substitution
        export namespace=${{ env.namespace }}
        export allowed_origins=${{ env.allowed_origins }}
        export ingress_host=${{ env.ingress_host }}
        export jwt_secret_key=${{ env.jwt_secret_key }}
        export postgres_user=${{ env.postgres_user }}
        export postgres_password=${{ env.postgres_password }}
        export replicas=${{ env.replicas }}
        export resources_requests_cpu=${{ env.resources_requests_cpu }}
        export resources_requests_memory=${{ env.resources_requests_memory }}
        export resources_limits_cpu=${{ env.resources_limits_cpu }}
        export resources_limits_memory=${{ env.resources_limits_memory }}
        
        # Set image paths with generated tag
        export member_image_path=${{ env.registry }}/${{ env.image_org }}/member:$IMAGE_TAG
        export mysub_image_path=${{ env.registry }}/${{ env.image_org }}/mysub:$IMAGE_TAG
        export recommend_image_path=${{ env.registry }}/${{ env.image_org }}/recommend:$IMAGE_TAG
        
        # Generate manifest from template
        envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
        
        echo "=== Generated Kubernetes Manifest ==="
        cat deployment/deploy.yaml
        echo "===================================="

    - name: Deploy to AKS
      run: |
        kubectl apply -f deployment/deploy.yaml
        
        echo "Waiting for deployments to be ready..."
        kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/member --timeout=300s
        kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/mysub --timeout=300s
        kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/recommend --timeout=300s
        
        echo "=== Deployment Status ==="
        kubectl -n ${{ env.namespace }} get pods
        kubectl -n ${{ env.namespace }} get svc
        kubectl -n ${{ env.namespace }} get ingress
        echo "========================="
